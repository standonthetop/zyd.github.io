{"pages":[],"posts":[{"title":"Java基础","text":"1、JDK(java开发工具包):Jdk是提供给java开发人员使用的，包含了java的开发工具和jre，安装了jdk就不用单独安装jre；其中的开发工具：编译工具（javac.exe) 打包工具(jar.exe)等； 2、JRE(java运行环境):包括java虚拟机和java程序所需的核心类库等，如果想要运行一个开发好的java程序，只需要安装jre即可 3、Java文件的编译和运行流程： a 将java代码编写到扩展名为.java的文件中； b 通过javac命令对该java文件进行编译; c 通过java命令对生成的class文件进行运行。","link":"/zyd.github.io/2018/12/02/Java前半部分/"},{"title":"Java基础","text":"异常处理：12345678910111213141516171819201）体系结构 java.lang.Object |----java.lang.Throwable |-------java.lang.Error：错误，java程序对此无能为力，不显式的处理 |-------java.lang.Exception:异常。需要进行处理 |------RuntimeException:运行时异常 |-----ArrayIndexOutOfBoundsException/NullPointerException/ArithmeticException/ClassCastException |------非RuntimeException:编译时异常 2）因为java程序分为javac.exe和java.exe两个过程，在每个过程中，都有可能出现异常。故分为编译 时异常、运行时异常； 2.1）对于运行时异常比较常见，可以不显式的来处理。 2.2）对于编译时异常，必须要显式的处理：编译时异常，不是说有异常才处理，而是存在异常的隐患，必须在编译前，提示程序，万一出现异常，如何处理！3）如何处理异常？ java 中的“抓抛模型” 3.1）\"抛\"：当我们执行代码时，一旦出现异常，就会在异常的代码处生成一个对应的异常类型的对象，并将此对象抛出。(自动抛出 / 手动抛出)； &gt;一旦抛出此异常类的对象，那么程序就终止执行； &gt;此异常类的对象抛给方法的调用者。 3.2）\"抓\"：抓住上一步抛出来的异常类的对象。如何抓？即为异常处理的方式 java 提供了两种方式用来处理一个异常类的对象： 异常处理方式 处理的方式一：123456789101112131415161718192021 try{ //可能出现异常的代码 }catch(Exception1 e1){ //处理的方式1 }catch(Exception2 e2){ //处理的方式2 }finally{ //一定要执行的代码 }注： ①try内声明的变量，类似于局部变量，出了try{}语句，就不能被调用； ②finally是可选的； ③catch语句内部是对异常对象的处理： &gt;getMessage(); printStackTrace(); ④可以有多个catch语句，try中抛出的异常类对象从上往下去匹配catch中的异常类的类型，一旦 满足就执行catch中的代码。执行完，就跳出其后的多条catch语句； ⑤如果异常处理了，那么其后的代码继续执行； ⑥若catch中多个异常类型是\"并列\"关系，孰上孰下都可以； 若catch中多个异常类型是\"包含\"关系，须将子类放在父类的上面，进行处理。否则报错！ ⑦finally中存放的是一定会被执行的代码，不管try中、catch中是否仍有异常未被处理，以及是 否有return语句； ⑧try-catch是可以嵌套的。 处理方式二：12345678910111213141516171819 在方法的声明处，显式的使用throws + 异常类型 public void method1() throws Exception1 e1,Exception2 e2{ //可能出现异常（尤其是编译时异常，一定要处理） } public void method2() throws Exception1 e1,Exception2 e2{ method1(); } public void method3(){try{ method2(); }catch(Exception1 e1){ System.out.println(e1.getMessage()); }catch(Exception2 e2){ System.out.println(e2.getMessage()); } } public static void main(String[] args){对象1.method3();//不会再出现上述的Exception1和Exception2的异常！ }","link":"/zyd.github.io/2018/12/02/Java后半部分/"}],"tags":[{"name":"technology","slug":"technology","link":"/zyd.github.io/tags/technology/"}],"categories":[{"name":"后端","slug":"后端","link":"/zyd.github.io/categories/后端/"}]}